package com.inavitas.dynamicdeviceupdater;


import com.inavitas.dynamicdeviceupdater.bean.KafkaData;
import com.inavitas.dynamicdeviceupdater.constants.EnvironmentVariables;
import com.inavitas.dynamicdeviceupdater.controller.DeviceUpdateController;
import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.context.annotation.PropertySource;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.TopicBuilder;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

import java.util.HashMap;
import java.util.Map;

@Configuration
//@PropertySource("classpath:application-kafkaclient.yml")
//@Profile("kafkaclient")
public class KafkaProducerConfig {

   // @Value(value = "${kafka.bootstrapAddress}")
   // private String bootstrapAddress;

    public static final Logger LOGGER = LoggerFactory.getLogger(KafkaProducerConfig.class);

    public static String deviceUpdateTopic = null;
    //@Value(value = "${kafka.topic.device-update}")
    //private String deviceUpdateTopicName;



    @Bean
    public ProducerFactory<String, KafkaData> kafkaDataProducerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        String bootstrapAddress = System.getenv(EnvironmentVariables.KAFKA_BROKER.getName());
        if(bootstrapAddress != null && !bootstrapAddress.equals(""))
            configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);
        LOGGER.info("Kafka Bootstrap Address is: {}", bootstrapAddress);
        deviceUpdateTopic = System.getenv(EnvironmentVariables.KAFKA_TOPIC_DEVICE_UPDATE.getName());
        LOGGER.info("Topic  is: {}", deviceUpdateTopic);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        configProps.put(ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG, 5000);
        configProps.put(ProducerConfig.RETRIES_CONFIG, 3);

        return new DefaultKafkaProducerFactory<>(configProps);
    }

    @Bean
    public KafkaTemplate<String, KafkaData> kafkaTemplate() {
        return new KafkaTemplate<String, KafkaData>(kafkaDataProducerFactory());
    }

/*
    @Bean
    public NewTopic deviceUpdateTopic() {
        return TopicBuilder.name(deviceUpdateTopicName)
                .partitions(2)
                .replicas(1)
                // .compact()
                .build();
    }
*/

}
